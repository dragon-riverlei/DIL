                                                                                                                  QUERY PLAN                                                                                                                  
----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Hash Join  (cost=51716.70..53342.60 rows=3231 width=235) (actual time=1612.402..1938.170 rows=3517 loops=1)
   Hash Cond: ((ss1.code)::text = (kpi_c3_npr_var.code)::text)
   CTE kpi_c3_npr
     ->  Subquery Scan on k  (cost=18314.51..21189.04 rows=442 width=13) (actual time=901.637..961.137 rows=3517 loops=1)
           Filter: (k.row_num = 1)
           Rows Removed by Filter: 84930
           ->  WindowAgg  (cost=18314.51..20083.45 rows=88447 width=25) (actual time=901.635..953.450 rows=88447 loops=1)
                 ->  Sort  (cost=18314.51..18535.63 rows=88447 width=17) (actual time=901.608..911.156 rows=88447 loops=1)
                       Sort Key: k0.code, k0."time" DESC
                       Sort Method: quicksort  Memory: 8989kB
                       ->  Seq Scan on securities_kpi k0  (cost=0.00..11047.47 rows=88447 width=17) (actual time=0.014..45.479 rows=88447 loops=1)
   CTE kpi_c3_npr_l5
     ->  Sort  (cost=1551.47..1551.84 rows=147 width=51) (actual time=371.037..372.175 rows=14889 loops=1)
           Sort Key: k2.code, k2."time"
           Sort Method: quicksort  Memory: 1548kB
           ->  Subquery Scan on k2  (cost=1531.88..1546.18 rows=147 width=51) (actual time=303.990..318.860 rows=14889 loops=1)
                 Filter: (k2.row_num < 6)
                 Rows Removed by Filter: 6953
                 ->  WindowAgg  (cost=1531.88..1540.68 rows=440 width=51) (actual time=303.988..315.991 rows=21842 loops=1)
                       ->  Sort  (cost=1531.88..1532.98 rows=440 width=43) (actual time=303.972..305.736 rows=21842 loops=1)
                             Sort Key: k0_1.code, k0_1."time" DESC
                             Sort Method: quicksort  Memory: 2475kB
                             ->  Sort  (cost=1507.06..1508.16 rows=440 width=43) (actual time=242.635..244.864 rows=21842 loops=1)
                                   Sort Key: k0_1.code, k0_1."time"
                                   Sort Method: quicksort  Memory: 2475kB
                                   ->  Bitmap Heap Scan on securities_kpi k0_1  (cost=11.72..1487.74 rows=440 width=43) (actual time=2.676..22.943 rows=21842 loops=1)
                                         Recheck Cond: (date_part('month'::text, ("time")::timestamp without time zone) = '12'::double precision)
                                         Filter: ((round("归属于母公司股东的净利润同比", 2) IS NOT NULL) AND ("time" < now()))
                                         Rows Removed by Filter: 3529
                                         Heap Blocks: exact=6757
                                         ->  Bitmap Index Scan on securities_kpi_idx_month  (cost=0.00..11.61 rows=442 width=0) (actual time=1.840..1.840 rows=25371 loops=1)
                                               Index Cond: (date_part('month'::text, ("time")::timestamp without time zone) = '12'::double precision)
   InitPlan 3 (returns $2)
     ->  Aggregate  (cost=2119.40..2119.41 rows=1 width=4) (actual time=18.144..18.144 rows=1 loops=1)
           ->  Seq Scan on securities_day_quote dq0  (cost=0.00..1882.52 rows=94752 width=4) (actual time=0.015..9.695 rows=95867 loops=1)
   ->  Hash Join  (cost=26805.58..28245.12 rows=3231 width=272) (actual time=214.281..523.084 rows=3517 loops=1)
         Hash Cond: ((ss1.code)::text = (bs.code)::text)
         ->  Hash Join  (cost=7183.39..8506.83 rows=1136 width=224) (actual time=111.899..417.553 rows=3517 loops=1)
               Hash Cond: ((ss1.code)::text = (kpi_c3_npr.code)::text)
               ->  Hash Join  (cost=7169.02..8451.55 rows=514 width=176) (actual time=110.518..413.504 rows=3517 loops=1)
                     Hash Cond: (((ss1.code)::text = (psrt0.code)::text) AND (psrt1."time" = (max(psrt0."time"))))
                     ->  Nested Loop  (cost=2162.18..3413.64 rows=5918 width=173) (actual time=85.804..366.330 rows=88447 loops=1)
                           ->  Nested Loop  (cost=2161.76..3087.22 rows=232 width=153) (actual time=85.774..216.881 rows=3517 loops=1)
                                 ->  Nested Loop  (cost=2161.35..2967.62 rows=226 width=136) (actual time=67.573..142.781 rows=3517 loops=1)
                                       ->  Merge Join  (cost=2161.06..2168.67 rows=147 width=92) (actual time=67.532..88.488 rows=3517 loops=1)
                                             Merge Cond: ((kpi_c3_npr_l5.code)::text = (ss0.code)::text)
                                             ->  GroupAggregate  (cost=8.23..11.54 rows=147 width=60) (actual time=8.742..21.762 rows=3517 loops=1)
                                                   Group Key: kpi_c3_npr_l5.code
                                                   ->  Sort  (cost=8.23..8.60 rows=147 width=60) (actual time=8.723..10.220 rows=14889 loops=1)
                                                         Sort Key: kpi_c3_npr_l5.code
                                                         Sort Method: quicksort  Memory: 1082kB
                                                         ->  CTE Scan on kpi_c3_npr_l5  (cost=0.00..2.94 rows=147 width=60) (actual time=0.001..2.206 rows=14889 loops=1)
                                             ->  Sort  (cost=2152.82..2153.32 rows=200 width=32) (actual time=58.778..59.694 rows=3551 loops=1)
                                                   Sort Key: ss0.code
                                                   Sort Method: quicksort  Memory: 263kB
                                                   ->  HashAggregate  (cost=2141.18..2143.18 rows=200 width=32) (actual time=22.080..22.990 rows=3551 loops=1)
                                                         Group Key: ss0.code
                                                         ->  Seq Scan on securities_stock_structure ss0  (cost=0.00..1833.12 rows=61612 width=32) (actual time=0.016..7.676 rows=61612 loops=1)
                                       ->  Index Scan using securities_stock_structure_pkey on securities_stock_structure ss1  (cost=0.29..10.58 rows=2 width=52) (actual time=0.014..0.014 rows=1 loops=3517)
                                             Index Cond: (((code)::text = (ss0.code)::text) AND ("time" = (max(ss0."time"))))
                                 ->  Index Scan using securities_day_quote_pkey on securities_day_quote dq1  (cost=0.42..0.53 rows=1 width=17) (actual time=0.015..0.015 rows=1 loops=3517)
                                       Index Cond: (((code)::text = (ss1.code)::text) AND ("time" = $2))
                           ->  Index Scan using securities_profit_sheet_running_total_pkey on securities_profit_sheet_running_total psrt1  (cost=0.42..1.16 rows=25 width=20) (actual time=0.016..0.035 rows=25 loops=3517)
                                 Index Cond: ((code)::text = (ss1.code)::text)
                     ->  Hash  (cost=4954.78..4954.78 rows=3471 width=11) (actual time=24.651..24.651 rows=3517 loops=1)
                           Buckets: 4096  Batches: 1  Memory Usage: 184kB
                           ->  GroupAggregate  (cost=0.42..4920.07 rows=3471 width=11) (actual time=0.031..23.599 rows=3517 loops=1)
                                 Group Key: psrt0.code
                                 ->  Index Only Scan using securities_profit_sheet_running_total_pkey on securities_profit_sheet_running_total psrt0  (cost=0.42..4443.12 rows=88447 width=11) (actual time=0.018..12.118 rows=88447 loops=1)
                                       Heap Fetches: 0
               ->  Hash  (cost=8.84..8.84 rows=442 width=48) (actual time=1.370..1.370 rows=3517 loops=1)
                     Buckets: 4096 (originally 1024)  Batches: 1 (originally 1)  Memory Usage: 190kB
                     ->  CTE Scan on kpi_c3_npr  (cost=0.00..8.84 rows=442 width=48) (actual time=0.002..0.525 rows=3517 loops=1)
         ->  Hash  (cost=19615.08..19615.08 rows=569 width=48) (actual time=102.355..102.356 rows=3551 loops=1)
               Buckets: 4096 (originally 1024)  Batches: 1 (originally 1)  Memory Usage: 199kB
               ->  Subquery Scan on bs  (cost=19603.70..19615.08 rows=569 width=48) (actual time=100.355..101.520 rows=3551 loops=1)
                     ->  HashAggregate  (cost=19603.70..19609.39 rows=569 width=48) (actual time=100.354..100.978 rows=3551 loops=1)
                           Group Key: bsb1.code, bsb1."归属于母公司股东的权益"
                           ->  Append  (cost=64.01..19600.85 rows=569 width=48) (actual time=0.397..98.269 rows=3551 loops=1)
                                 ->  Hash Join  (cost=64.01..127.25 rows=22 width=15) (actual time=0.396..0.583 rows=28 loops=1)
                                       Hash Cond: (((bsb1.code)::text = (bsb0.code)::text) AND (bsb1."time" = (max(bsb0."time"))))
                                       ->  Seq Scan on securities_balance_sheet_bank bsb1  (cost=0.00..59.02 rows=802 width=19) (actual time=0.010..0.098 rows=802 loops=1)
                                       ->  Hash  (cost=63.59..63.59 rows=28 width=11) (actual time=0.339..0.339 rows=28 loops=1)
                                             Buckets: 1024  Batches: 1  Memory Usage: 10kB
                                             ->  HashAggregate  (cost=63.03..63.31 rows=28 width=11) (actual time=0.320..0.325 rows=28 loops=1)
                                                   Group Key: bsb0.code
                                                   ->  Seq Scan on securities_balance_sheet_bank bsb0  (cost=0.00..59.02 rows=802 width=11) (actual time=0.003..0.099 rows=802 loops=1)
                                 ->  Hash Join  (cost=9684.61..19273.21 rows=517 width=17) (actual time=55.289..96.285 rows=3488 loops=1)
                                       Hash Cond: (((bsg1.code)::text = (bsg0.code)::text) AND (bsg1."time" = (max(bsg0."time"))))
                                       ->  Seq Scan on securities_balance_sheet_general bsg1  (cost=0.00..9045.83 rows=103383 width=21) (actual time=0.005..15.253 rows=103383 loops=1)
                                       ->  Hash  (cost=9632.39..9632.39 rows=3482 width=11) (actual time=51.831..51.831 rows=3488 loops=1)
                                             Buckets: 4096  Batches: 1  Memory Usage: 182kB
                                             ->  HashAggregate  (cost=9562.75..9597.57 rows=3482 width=11) (actual time=49.379..50.553 rows=3488 loops=1)
                                                   Group Key: bsg0.code
                                                   ->  Seq Scan on securities_balance_sheet_general bsg0  (cost=0.00..9045.83 rows=103383 width=11) (actual time=0.003..15.181 rows=103383 loops=1)
                                 ->  Hash Join  (cost=86.17..171.50 rows=26 width=17) (actual time=0.700..0.751 rows=31 loops=1)
                                       Hash Cond: (((bss1.code)::text = (bss0.code)::text) AND (bss1."time" = (max(bss0."time"))))
                                       ->  Seq Scan on securities_balance_sheet_securities bss1  (cost=0.00..80.39 rows=939 width=21) (actual time=0.017..0.146 rows=939 loops=1)
                                       ->  Hash  (cost=85.70..85.70 rows=31 width=11) (actual time=0.415..0.415 rows=31 loops=1)
                                             Buckets: 1024  Batches: 1  Memory Usage: 10kB
                                             ->  HashAggregate  (cost=85.08..85.39 rows=31 width=11) (actual time=0.399..0.405 rows=31 loops=1)
                                                   Group Key: bss0.code
                                                   ->  Seq Scan on securities_balance_sheet_securities bss0  (cost=0.00..80.39 rows=939 width=11) (actual time=0.004..0.175 rows=939 loops=1)
                                 ->  Hash Join  (cost=10.22..20.36 rows=4 width=13) (actual time=0.151..0.157 rows=4 loops=1)
                                       Hash Cond: (((bsi1.code)::text = (bsi0.code)::text) AND (bsi1."time" = (max(bsi0."time"))))
                                       ->  Seq Scan on securities_balance_sheet_insurance bsi1  (cost=0.00..9.39 rows=139 width=17) (actual time=0.006..0.023 rows=139 loops=1)
                                       ->  Hash  (cost=10.16..10.16 rows=4 width=11) (actual time=0.090..0.090 rows=4 loops=1)
                                             Buckets: 1024  Batches: 1  Memory Usage: 9kB
                                             ->  HashAggregate  (cost=10.09..10.12 rows=4 width=11) (actual time=0.063..0.064 rows=4 loops=1)
                                                   Group Key: bsi0.code
                                                   ->  Seq Scan on securities_balance_sheet_insurance bsi0  (cost=0.00..9.39 rows=139 width=11) (actual time=0.003..0.025 rows=139 loops=1)
   ->  Hash  (cost=48.33..48.33 rows=200 width=60) (actual time=1398.083..1398.083 rows=3517 loops=1)
         Buckets: 4096 (originally 1024)  Batches: 1 (originally 1)  Memory Usage: 213kB
         ->  Subquery Scan on kpi_c3_npr_var  (cost=42.33..48.33 rows=200 width=60) (actual time=1368.430..1396.462 rows=3517 loops=1)
               ->  HashAggregate  (cost=42.33..46.33 rows=200 width=60) (actual time=1368.429..1395.830 rows=3517 loops=1)
                     Group Key: "*SELECT* 1".code
                     ->  HashAggregate  (cost=26.14..32.03 rows=589 width=68) (actual time=1350.511..1355.846 rows=18406 loops=1)
                           Group Key: "*SELECT* 1".code, "*SELECT* 1"."归属于母公司股东的净利润同比", ((0)::bigint)
                           ->  Append  (cost=0.00..21.72 rows=589 width=68) (actual time=901.642..1341.434 rows=18406 loops=1)
                                 ->  Subquery Scan on "*SELECT* 1"  (cost=0.00..14.37 rows=442 width=56) (actual time=901.641..963.096 rows=3517 loops=1)
                                       ->  CTE Scan on kpi_c3_npr kpi_c3_npr_1  (cost=0.00..8.84 rows=442 width=52) (actual time=901.640..962.505 rows=3517 loops=1)
                                 ->  CTE Scan on kpi_c3_npr_l5 kpi_c3_npr_l5_1  (cost=0.00..2.94 rows=147 width=68) (actual time=371.045..376.275 rows=14889 loops=1)
 Planning Time: 49.515 ms
 Execution Time: 1941.758 ms
(124 rows)
